[
  {
    "description": "\nCapitalize string\n\n",
    "commentRange": {
      "start": 2,
      "end": 8
    },
    "context": {
      "type": "function",
      "name": "capitalize",
      "code": "\n    @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);\n",
      "line": {
        "start": 10,
        "end": 12
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "string",
        "name": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_capitalize.scss",
      "name": "_capitalize.scss"
    }
  },
  {
    "description": "\nReturns a color from `$bruce-colors`\n\n",
    "commentRange": {
      "start": 2,
      "end": 14
    },
    "context": {
      "type": "function",
      "name": "color",
      "code": "\n    @return mapGetIn($bruce-colors, $name);\n",
      "line": {
        "start": 16,
        "end": 18
      }
    },
    "group": [
      "functions"
    ],
    "link": [
      {
        "url": "http://github.com/allanhortle/bruce/src/functions/_color.scss",
        "caption": ""
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "mapGetIn"
      }
    ],
    "parameter": [
      {
        "type": "string",
        "name": "name",
        "description": "uses `map-fetch()` to return the value of `$name` from `$bruce-colors`"
      }
    ],
    "return": {
      "type": "string",
      "description": "s"
    },
    "example": [
      {
        "type": "scss",
        "code": ".class {\n\tbackground-color: color('red');\n}"
      }
    ],
    "access": "public",
    "file": {
      "path": "functions/_color.scss",
      "name": "_color.scss"
    }
  },
  {
    "description": "\nSelects the first item in a list\n\n",
    "commentRange": {
      "start": 2,
      "end": 8
    },
    "context": {
      "type": "function",
      "name": "first",
      "code": "\n    @return nth($list, 1);\n",
      "line": {
        "start": 10,
        "end": 12
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "list",
        "name": "list"
      }
    ],
    "return": {
      "type": "value"
    },
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_first.scss",
      "name": "_first.scss"
    }
  },
  {
    "description": "\nRounds a number to a fixed ammount of decimal places\n",
    "commentRange": {
      "start": 2,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "fixed",
      "code": "\n    $p: power(10, $places);\n    @return round($val * $p) / $p;\n",
      "line": {
        "start": 12,
        "end": 15
      }
    },
    "parameter": [
      {
        "type": "number",
        "name": "val"
      },
      {
        "type": "number",
        "name": "places"
      }
    ],
    "return": {
      "type": "number"
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "fixed(20.123, 2); // => 20.12"
      }
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "power"
      }
    ],
    "file": {
      "path": "functions/_fixed.scss",
      "name": "_fixed.scss"
    }
  },
  {
    "description": "\nReturns a color from `$bruce-colors`\n\n",
    "commentRange": {
      "start": 2,
      "end": 14
    },
    "context": {
      "type": "function",
      "name": "font",
      "code": "\n    @return mapGetIn($bruce-fonts, $name);\n",
      "line": {
        "start": 16,
        "end": 18
      }
    },
    "group": [
      "functions"
    ],
    "link": [
      {
        "url": "http://github.com/allanhortle/bruce/src/functions/_font.scss",
        "caption": ""
      }
    ],
    "require": [
      {
        "type": "function",
        "name": "mapGetIn"
      }
    ],
    "parameter": [
      {
        "type": "string",
        "name": "name",
        "description": "uses `mapGetIn()` to return the value of `$name` from `$bruce-fonts`"
      }
    ],
    "return": {
      "type": "string",
      "description": "s"
    },
    "example": [
      {
        "type": "scss",
        "code": ".class {\n\tfont-family: fonts('body');\n}"
      }
    ],
    "access": "public",
    "file": {
      "path": "functions/_font.scss",
      "name": "_font.scss"
    }
  },
  {
    "description": "\nReturns a named map of the four property shorthand\n\n",
    "commentRange": {
      "start": 2,
      "end": 11
    },
    "context": {
      "type": "function",
      "name": "fourProps",
      "code": "\n    $length: length($props);\n\n    $top:       nth($props, 1);\n    $right:     nth($props, 1);\n    $bottom:    nth($props, 1);\n    $left:      nth($props, 1);\n\n    @if ($length == 2) {\n        $right:     nth($props, 2);\n        $left:      nth($props, 2);\n    }\n\n    @if ($length == 3) {\n        $right:     nth($props, 2);\n        $bottom:    nth($props, 3);\n        $left:      nth($props, 2);\n    }\n\n    @if ($length == 4) {\n        $right:     nth($props, 2);\n        $bottom:    nth($props, 3);\n        $left:      nth($props, 4);\n    }\n\n\n    @return (\n        top: $top,     \n        right: $right,   \n        bottom: $bottom,  \n        left: $left  \n    );\n",
      "line": {
        "start": 12,
        "end": 44
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "list",
        "name": "props"
      }
    ],
    "return": {
      "type": "map"
    },
    "example": [
      {
        "type": "scss",
        "code": "fourProps(1px 2px 3px 4px)  // => (top: 1px, right: 2px, bottom: 3px, left: 4px)\nfourProps(1rem 2rem)        // => (top: 1rem, right: 2rem, bottom: 1rem, left: 2rem)"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_fourProps.scss",
      "name": "_fourProps.scss"
    },
    "usedBy": [
      {
        "description": "\nAdds Spruce modifiers for direction based rules\n\n",
        "context": {
          "type": "mixin",
          "name": "BruceDirectionModifiers",
          "code": "\n    $sides: fourProps($sizes);\n    $prefix: nth($name, 1);\n    $suffix: '';\n\n    @if(length($name) == 2) {\n        $suffix: nth($name, 2);\n    }\n\n    &-#{$prefix}#{$suffix} {\n        #{$prop}-top: map-get($sides, 'top');\n        #{$prop}-right: map-get($sides, 'right');\n        #{$prop}-bottom: map-get($sides, 'bottom');\n        #{$prop}-left: map-get($sides, 'left');\n    }\n\n    &-#{$prefix}Column#{$suffix} {\n        #{$prop}-left: map-get($sides, 'left');\n        #{$prop}-right: map-get($sides, 'right');\n    }\n\n    &-#{$prefix}Row#{$suffix} {\n        #{$prop}-top: map-get($sides, 'top');\n        #{$prop}-bottom: map-get($sides, 'bottom');\n    }\n\n    @each $Direction in ('Top', 'Right', 'Bottom', 'Left') {\n        $direction: to_lower_case($Direction);\n        &-#{$prefix}#{$Direction}#{$suffix} {\n            #{$prop}-#{$direction}: map-get($sides, 'top');\n        }\n    }\n",
          "line": {
            "start": 50,
            "end": 83
          }
        }
      }
    ]
  },
  {
    "description": "\nReturns a grey value from 0 - 100\n",
    "commentRange": {
      "start": 2,
      "end": 8
    },
    "context": {
      "type": "function",
      "name": "grey",
      "code": "\n    @return hsla(0, 0, $var, $opacity);\n",
      "line": {
        "start": 9,
        "end": 11
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "number",
        "name": "var",
        "default": "50"
      },
      {
        "type": "number",
        "name": "opacity",
        "default": "1"
      }
    ],
    "return": {
      "type": "hlsa"
    },
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_grey.scss",
      "name": "_grey.scss"
    }
  },
  {
    "description": "\nInverts a number\n\n",
    "commentRange": {
      "start": 2,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "invert",
      "code": "\n    @return $var * -1;\n",
      "line": {
        "start": 12,
        "end": 14
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "number",
        "name": "var"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "invert(1); // => -1"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_invert.scss",
      "name": "_invert.scss"
    }
  },
  {
    "description": "\nSelects the last item in a list\n\n",
    "commentRange": {
      "start": 3,
      "end": 9
    },
    "context": {
      "type": "function",
      "name": "last",
      "code": "\n    @return nth($list, length($list));\n",
      "line": {
        "start": 11,
        "end": 13
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "list",
        "name": "list"
      }
    ],
    "return": {
      "type": "value"
    },
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_last.scss",
      "name": "_last.scss"
    }
  },
  {
    "description": "\nReturns values from nested lists\n",
    "commentRange": {
      "start": 2,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "mapGetIn",
      "code": "\n    @each $key in $keys {\n        $map: map-get($map, $key);\n    }\n    @return $map;\n",
      "line": {
        "start": 11,
        "end": 16
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "list",
        "name": "map"
      },
      {
        "type": "list",
        "name": "keys"
      }
    ],
    "return": {
      "type": "value"
    },
    "example": [
      {
        "type": "scss",
        "code": "mapGetIn($myNestedMap, 'key' 'deeperKey' $variableKey);"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_mapGetIn.scss",
      "name": "_mapGetIn.scss"
    },
    "usedBy": [
      {
        "description": "\nReturns a color from `$bruce-colors`\n\n",
        "context": {
          "type": "function",
          "name": "color",
          "code": "\n    @return mapGetIn($bruce-colors, $name);\n",
          "line": {
            "start": 16,
            "end": 18
          }
        }
      },
      {
        "description": "\nReturns a color from `$bruce-colors`\n\n",
        "context": {
          "type": "function",
          "name": "font",
          "code": "\n    @return mapGetIn($bruce-fonts, $name);\n",
          "line": {
            "start": 16,
            "end": 18
          }
        }
      }
    ]
  },
  {
    "description": "\n\nPastelizes a color by lightening and desaturating\n\n",
    "commentRange": {
      "start": 2,
      "end": 12
    },
    "context": {
      "type": "function",
      "name": "pastel",
      "code": "\n    @return lighten(desaturate($var, $desaturate), $lighten);\n",
      "line": {
        "start": 14,
        "end": 16
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "color",
        "name": "base"
      },
      {
        "type": "number",
        "name": "desaturate",
        "default": "10"
      },
      {
        "type": "number",
        "name": "lighten",
        "default": "10"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "pastel(#ff0000); // => #f53d3d\npastel(#ff0000, 25, 25); // => #ef8f8f"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_pastel.scss",
      "name": "_pastel.scss"
    }
  },
  {
    "description": "\nReturns `$number` to the power of `$exponent`\n",
    "commentRange": {
      "start": 2,
      "end": 10
    },
    "context": {
      "type": "function",
      "name": "power",
      "code": "\n    $value: 1;\n    @if $exponent > 0 {\n        @for $i from 1 through $exponent {\n            $value: $value * $number;\n        }\n    }\n    @else if $exponent < 0 {\n        @for $i from 1 through -$exponent {\n            $value: $value / $number;\n        }\n    }\n    @return $value;\n",
      "line": {
        "start": 12,
        "end": 25
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "number",
        "name": "number"
      },
      {
        "type": "number",
        "name": "exponent"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "power(10, 2); // => 100"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_power.scss",
      "name": "_power.scss"
    },
    "usedBy": [
      {
        "description": "\nRounds a number to a fixed ammount of decimal places\n",
        "context": {
          "type": "function",
          "name": "fixed",
          "code": "\n    $p: power(10, $places);\n    @return round($val * $p) / $p;\n",
          "line": {
            "start": 12,
            "end": 15
          }
        }
      }
    ]
  },
  {
    "description": "\nRepeats a character by an ammount\n\n",
    "commentRange": {
      "start": 2,
      "end": 13
    },
    "context": {
      "type": "function",
      "name": "repeatChar",
      "code": "\n    $repeat: '';\n    @for $i from 0 through $ammount - 1 {\n        $repeat: $repeat + $character;\n    }\n    @return $repeat;\n",
      "line": {
        "start": 14,
        "end": 20
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "string",
        "name": "character"
      },
      {
        "type": "number",
        "name": "ammount"
      }
    ],
    "return": {
      "type": "string"
    },
    "example": [
      {
        "type": "scss",
        "code": ".class:before {\n\tcontent: repeatChar('.', 100)\n}"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_repeatChar.scss",
      "name": "_repeatChar.scss"
    }
  },
  {
    "description": "\nStrips the value suffix\n",
    "commentRange": {
      "start": 2,
      "end": 7
    },
    "context": {
      "type": "function",
      "name": "stripUnits",
      "code": "\n    @return $value / ($value * 0 + 1);\n",
      "line": {
        "start": 8,
        "end": 10
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "value",
        "name": "var"
      }
    ],
    "return": {
      "type": "number"
    },
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_stripUnits.scss",
      "name": "_stripUnits.scss"
    }
  },
  {
    "description": "\nReturns the position of `$component` in `$bruce-zindexList`\n\n",
    "commentRange": {
      "start": 2,
      "end": 18
    },
    "context": {
      "type": "function",
      "name": "zindex",
      "code": "\n    $list: $bruce-zindex;\n    $zindex: index($list, $component);\n    @if $zindex {\n        @return $zindex;\n    }\n\n    @warn 'zindex(): There is no item \"#{$component}\" in $bruce-zindex; choose one of: #{$list}';\n    @return null;\n",
      "line": {
        "start": 20,
        "end": 29
      }
    },
    "group": [
      "functions"
    ],
    "parameter": [
      {
        "type": "string",
        "name": "component"
      }
    ],
    "return": {
      "type": "number"
    },
    "example": [
      {
        "type": "scss",
        "code": "$bruce-zindex:(\n    'Button',\n    'Widget',\n    'Link'\n);\n\n.Button {\n   \tz-index: zindex('Button'); // => 1\n}"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "functions/_zindex.scss",
      "name": "_zindex.scss"
    }
  },
  {
    "description": "\nUses the React.addons.CSSTransitionGroup syntax\nto create simple single property animations.\n",
    "commentRange": {
      "start": 2,
      "end": 32
    },
    "context": {
      "type": "mixin",
      "name": "BruceAnimationSingleProperty",
      "code": "\n    @if ($fromLeave == null) {\n        $fromLeave: $fromEnter;\n    }\n\n    @if ($toLeave == null) {\n        $toLeave: $toEnter;\n    }\n\n    .#{$name}-enter {\n        #{$prop}: #{$fromEnter};\n\n        &.#{$name}-enter-active {\n            transition: $prop $duration;\n            #{$prop}: #{$toEnter};\n        }\n    }\n\n    .#{$name}-leave {\n        transition: $prop $duration;\n        #{$prop}: #{$fromLeave};\n\n        &.#{$name}-leave-active {\n            #{$prop}: #{$toLeave};\n        }\n    }\n",
      "line": {
        "start": 34,
        "end": 60
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "string",
        "name": "name"
      },
      {
        "type": "string",
        "name": "duration"
      },
      {
        "type": "string",
        "name": "prop"
      },
      {
        "type": "string",
        "name": "fromEnter"
      },
      {
        "type": "string",
        "name": "toEnter"
      },
      {
        "type": "string",
        "name": "fromLeave"
      },
      {
        "type": "string",
        "name": "toLeave"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "// scss\n@include bruce-singlePropAnimation('fade', 300ms, opacity, 0, 1);\n\n// css\n.fade-enter {\n    opacity: 0;\n}\n.fade-enter.fade-enter-active {\n    transition: all 300ms;\n    opacity: 1;\n}\n.fade-leave {\n    transition: all 300ms;\n    opacity: 1;\n}\n.fade-leave.fade-leave-active {\n    opacity: 0;\n}"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_animations.scss",
      "name": "_animations.scss"
    }
  },
  {
    "description": "\nA sensible box-sizing inherit\n\n",
    "commentRange": {
      "start": 2,
      "end": 6
    },
    "context": {
      "type": "mixin",
      "name": "BruceBoxSizing",
      "code": "\n    html {\n        box-sizing: border-box;\n    }\n\n    * {\n        box-sizing: inherit;\n\n        &:before,\n        &:after {\n            box-sizing: inherit;\n        }\n    }\n",
      "line": {
        "start": 8,
        "end": 21
      }
    },
    "group": [
      "mixin"
    ],
    "output": "SHOW",
    "access": "public",
    "file": {
      "path": "mixins/_boxSizing.scss",
      "name": "_boxSizing.scss"
    }
  },
  {
    "description": "\nReturns a media query based on the content of `$breakpoint`.\n",
    "commentRange": {
      "start": 2,
      "end": 28
    },
    "context": {
      "type": "mixin",
      "name": "BruceBreakpoint",
      "code": "\n    @if map-has-key($bruce-breakpoints, $breakpoint) {\n        $breakpoint: map-get($bruce-breakpoints, $breakpoint);\n    }\n\n    @if type-of($breakpoint) == 'number'{\n        @media (min-width: #{$breakpoint})  {\n            @content;\n        }\n    }\n\n    @if type-of($breakpoint) == 'list' {\n        $first: nth($breakpoint, 1);\n        $breakpoint: nth($breakpoint, 2);\n\n        @if map-has-key($bruce-breakpoints, $breakpoint) {\n            $breakpoint: map-get($bruce-breakpoints, $breakpoint);\n        }\n\n\n        @if type-of($first) == 'string' {\n            @media (#{$first}: #{$breakpoint}) {\n                @content;\n            }\n        }\n        @elseif type-of($first) == 'number' {\n            @media (min-width: #{$first}) and (max-width: #{$breakpoint}) {\n                @content;\n            }\n        }\n        @else {\n            @warn 'bruce-breakpoint: wrong syntax';\n        }\n    }\n",
      "line": {
        "start": 30,
        "end": 65
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "string|value|list",
        "name": "breakpoint"
      }
    ],
    "content": "",
    "example": [
      {
        "type": "scss",
        "code": ".class {\n    font-size: 1rem;\n\n    @include BruceBreakpoint('small') {\n        font-size: 2rem;\n    }\n\n    @include BruceBreakpoint(40em) {\n        font-size: 3rem;\n    }\n\n    @include BruceBreakpoint(max-width 40em) {\n        font-size: 4rem;\n    }\n\n    @include BruceBreakpoint(20em 40em) {\n        font-size: 4rem;\n    }\n\n}"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_breakpoints.scss",
      "name": "_breakpoints.scss"
    },
    "usedBy": [
      {
        "description": "\nCreate a table grid\n",
        "context": {
          "type": "mixin",
          "name": "BruceGrid",
          "code": "\n  .#{$name} {\n    box-sizing: border-box;\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n\n    &-auto {\n        table-layout: auto;\n    }\n\n    &_item {\n        box-sizing: border-box;\n        display: block;\n        vertical-align: top;\n\n        &-paddingMega {\n            border-left: 4rem solid transparent;\n            border-right: 4rem solid transparent;\n        }\n\n        &-paddingKilo {\n            border-left: 2rem solid transparent;\n            border-right: 2rem solid transparent;\n        }\n\n        &-padding {\n            border-left: 1rem solid transparent;\n            border-right: 1rem solid transparent;\n        }\n\n        &-paddingMilli {\n            border-left: .5rem solid transparent;\n            border-right: .5rem solid transparent;\n        }\n\n        &:first-child {\n            border-left: 0;\n        }\n\n        &:last-child {\n            border-right: 0;\n        }\n\n        &-shrink {\n            white-space: nowrap;\n            width: 1px;\n        }\n    }\n  }\n\n  @include BruceGridWidths($number, \".#{$name}_item\", \".#{$name}_item-always.#{$name}_item\");\n  @include BruceBreakpoint('small') {\n    @include BruceGridWidths($number, \".#{$name}_item\", \".#{$name}_item\");\n  }\n\n  .#{$name} {\n    @content;\n  }\n",
          "line": {
            "start": 42,
            "end": 101
          }
        }
      }
    ]
  },
  {
    "description": "\n`:after` pseudo element clearfix\n\n",
    "commentRange": {
      "start": 2,
      "end": 6
    },
    "context": {
      "type": "mixin",
      "name": "BruceClearfix",
      "code": "\n    &:after {\n        clear: both;\n        content: '';\n        display: table;\n    }\n",
      "line": {
        "start": 8,
        "end": 14
      }
    },
    "group": [
      "mixin"
    ],
    "access": "public",
    "file": {
      "path": "mixins/_clearfix.scss",
      "name": "_clearfix.scss"
    }
  },
  {
    "description": "\nAdds Spruce modifiers for direction based rules\n\n",
    "commentRange": {
      "start": 2,
      "end": 48
    },
    "context": {
      "type": "mixin",
      "name": "BruceDirectionModifiers",
      "code": "\n    $sides: fourProps($sizes);\n    $prefix: nth($name, 1);\n    $suffix: '';\n\n    @if(length($name) == 2) {\n        $suffix: nth($name, 2);\n    }\n\n    &-#{$prefix}#{$suffix} {\n        #{$prop}-top: map-get($sides, 'top');\n        #{$prop}-right: map-get($sides, 'right');\n        #{$prop}-bottom: map-get($sides, 'bottom');\n        #{$prop}-left: map-get($sides, 'left');\n    }\n\n    &-#{$prefix}Column#{$suffix} {\n        #{$prop}-left: map-get($sides, 'left');\n        #{$prop}-right: map-get($sides, 'right');\n    }\n\n    &-#{$prefix}Row#{$suffix} {\n        #{$prop}-top: map-get($sides, 'top');\n        #{$prop}-bottom: map-get($sides, 'bottom');\n    }\n\n    @each $Direction in ('Top', 'Right', 'Bottom', 'Left') {\n        $direction: to_lower_case($Direction);\n        &-#{$prefix}#{$Direction}#{$suffix} {\n            #{$prop}-#{$direction}: map-get($sides, 'top');\n        }\n    }\n",
      "line": {
        "start": 50,
        "end": 83
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "list",
        "name": "name"
      },
      {
        "type": "string",
        "name": "prop"
      },
      {
        "type": "list",
        "name": "size"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "\n.Text {\n    @include BruceDirectionModifiers('margin' 'Giga', 'margin', 1rem 2rem);\n}\n\n// Will Produce:\n\n.Text-marginGiga {\n  margin-top: 1rem;\n  margin-right: 2rem;\n  margin-bottom: 1rem;\n  margin-left: 2rem;\n}\n\n.Text-marginColumnGiga {\n  margin-left: 2rem;\n  margin-right: 2rem;\n}\n\n.Text-marginRowGiga {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n\n.Text-marginTopGiga {\n  margin-top: 1rem;\n}\n\n.Text-marginRightGiga {\n  margin-right: 1rem;\n}\n\n.Text-marginBottomGiga {\n  margin-bottom: 1rem;\n}\n\n.Text-marginLeftGiga {\n  margin-left: 1rem;\n}"
      }
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "fourProps"
      }
    ],
    "file": {
      "path": "mixins/_directionModifiers.scss",
      "name": "_directionModifiers.scss"
    }
  },
  {
    "description": "\nApplies the relevant styles to implement `text-overflow: ellipsis`.\n`$cutoff` allows the user to shrink in the space between the edge and...\n",
    "commentRange": {
      "start": 2,
      "end": 7
    },
    "context": {
      "type": "mixin",
      "name": "BruceEllipsis",
      "code": "\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n\n    @if $cutoff != null {\n        padding-right: $cutoff;\n    }\n",
      "line": {
        "start": 9,
        "end": 17
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "value",
        "name": "cutoff"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_ellipsis.scss",
      "name": "_ellipsis.scss"
    }
  },
  {
    "description": "\nAbsolutely position an element to it's containing bounds.\n\n",
    "commentRange": {
      "start": 2,
      "end": 6
    },
    "context": {
      "type": "mixin",
      "name": "BruceFlood",
      "code": "\n    bottom: 0;\n    left: 0;\n    position: absolute;\n    right: 0;\n    top: 0;\n",
      "line": {
        "start": 8,
        "end": 14
      }
    },
    "group": [
      "mixin"
    ],
    "output": "SHOW",
    "access": "public",
    "file": {
      "path": "mixins/_flood.scss",
      "name": "_flood.scss"
    }
  },
  {
    "description": "\nChains all your font face declarations into one include.\n",
    "commentRange": {
      "start": 2,
      "end": 14
    },
    "context": {
      "type": "mixin",
      "name": "BruceFontFace",
      "code": "\n    @each $name, $path, $font-weight, $font-style in $lists {\n        @if ($font-weight == null) {\n            $font-weight: normal;\n        }\n\n        @if ($font-style == null) {\n            $font-style: normal;\n        }\n\n        @font-face {\n            font-family: $name;\n            src: url(\"#{$path}.eot\");\n            src: url(\"#{$path}.eot?#iefix\") format(\"embedded-opentype\"),\n                 url(\"#{$path}.woff2\") format(\"woff2\"),\n                 url(\"#{$path}.woff\") format(\"woff\"),\n                 url(\"#{$path}.ttf\") format(\"truetype\"),\n                 url(\"#{$path}.svg##{$name}\") format(\"svg\");\n            font-weight: $font-weight;\n            font-style: $font-style;\n        }\n    }\n",
      "line": {
        "start": 16,
        "end": 38
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "list: $name, $path, $font-weight, $font-style",
        "name": "lists"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include BruceFontFace((\n    ('ProximaNova'          'fonts/proxima-nova/proximanova-light'      100),\n    ('ProximaNova'          'fonts/proxima-nova/proximanova-regular'    300),\n    ('ProximaNova'          'fonts/proxima-nova/proximanova-regitalic'  300   italic),\n    ('ProximaNova'          'fonts/proxima-nova/proximanova-bold'       600),\n    ('Glyphicons'           'fonts/glyphicons-regular'),\n    ('GlyphiconsHalflings'  'fonts/glyphicons-halflings-regular')\n));"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_fontface.scss",
      "name": "_fontface.scss"
    }
  },
  {
    "description": "\nCreate a table grid\n",
    "commentRange": {
      "start": 36,
      "end": 40
    },
    "context": {
      "type": "mixin",
      "name": "BruceGrid",
      "code": "\n  .#{$name} {\n    box-sizing: border-box;\n    display: table;\n    table-layout: fixed;\n    width: 100%;\n\n    &-auto {\n        table-layout: auto;\n    }\n\n    &_item {\n        box-sizing: border-box;\n        display: block;\n        vertical-align: top;\n\n        &-paddingMega {\n            border-left: 4rem solid transparent;\n            border-right: 4rem solid transparent;\n        }\n\n        &-paddingKilo {\n            border-left: 2rem solid transparent;\n            border-right: 2rem solid transparent;\n        }\n\n        &-padding {\n            border-left: 1rem solid transparent;\n            border-right: 1rem solid transparent;\n        }\n\n        &-paddingMilli {\n            border-left: .5rem solid transparent;\n            border-right: .5rem solid transparent;\n        }\n\n        &:first-child {\n            border-left: 0;\n        }\n\n        &:last-child {\n            border-right: 0;\n        }\n\n        &-shrink {\n            white-space: nowrap;\n            width: 1px;\n        }\n    }\n  }\n\n  @include BruceGridWidths($number, \".#{$name}_item\", \".#{$name}_item-always.#{$name}_item\");\n  @include BruceBreakpoint('small') {\n    @include BruceGridWidths($number, \".#{$name}_item\", \".#{$name}_item\");\n  }\n\n  .#{$name} {\n    @content;\n  }\n",
      "line": {
        "start": 42,
        "end": 101
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "number",
        "name": "number"
      }
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "mixin",
        "name": "BruceBreakpoint"
      }
    ],
    "file": {
      "path": "mixins/_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "\nUses positioing to hide but not remove\n",
    "commentRange": {
      "start": 2,
      "end": 5
    },
    "context": {
      "type": "mixin",
      "name": "BruceHide",
      "code": "\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n",
      "line": {
        "start": 7,
        "end": 16
      }
    },
    "group": [
      "mixin"
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_hide.scss",
      "name": "_hide.scss"
    }
  },
  {
    "description": "\nUses `:before` to create a fixed ratio for the element\n",
    "commentRange": {
      "start": 1,
      "end": 6
    },
    "context": {
      "type": "mixin",
      "name": "BruceRatio",
      "code": "\n    &:before {\n        content: '';\n        display: block;\n        padding-top: $height / $width * 100%;\n    }\n",
      "line": {
        "start": 8,
        "end": 14
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "number",
        "name": "width"
      },
      {
        "type": "number",
        "name": "height"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_ratio.scss",
      "name": "_ratio.scss"
    }
  },
  {
    "description": "\nThe Meyer reset. Can take a custom list of elements for padding and margin removal.\n",
    "commentRange": {
      "start": 19,
      "end": 26
    },
    "context": {
      "type": "mixin",
      "name": "BruceReset",
      "code": "\n    #{$elements} {\n        border: 0;\n        font-size: 100%;\n        font: inherit;\n        margin: 0;\n        padding: 0;\n        vertical-align: baseline;\n    }\n\n    article,\n    aside,\n    details,\n    figcaption,\n    figure,\n    footer,\n    header,\n    hgroup,\n    menu,\n    nav,\n    section {\n        display: block;\n    }\n\n    body {\n        line-height: 1;\n    }\n\n    ol,\n    ul {\n        list-style: none;\n    }\n\n    blockquote,\n    q {\n        quotes: none;\n    }\n\n    blockquote:before,\n    blockquote:after,\n    q:before,\n    q:after {\n        content: '';\n        content: none;\n    }\n\n    table {\n        border-collapse: collapse;\n        border-spacing: 0;\n    }\n",
      "line": {
        "start": 28,
        "end": 81
      }
    },
    "group": [
      "mixin"
    ],
    "link": [
      {
        "url": "http://www.meyerweb.com/eric/tools/css/reset/",
        "caption": "The Meyer reset"
      },
      {
        "url": "http://www.meyerweb.com/eric/tools/css/reset/",
        "caption": "The Meyer reset"
      }
    ],
    "parameter": [
      {
        "type": "list",
        "name": "elements",
        "default": "'all elements'"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_reset.scss",
      "name": "_reset.scss"
    }
  },
  {
    "description": "\nOne declaration for width and height\n\n",
    "commentRange": {
      "start": 1,
      "end": 13
    },
    "context": {
      "type": "mixin",
      "name": "BruceSize",
      "code": "\n    @if $height != null {\n        height: $height;\n        width: $width;\n    } @else {\n        height: $width;\n        width: $width;\n    }\n",
      "line": {
        "start": 14,
        "end": 22
      }
    },
    "group": [
      "mixin"
    ],
    "parameter": [
      {
        "type": "value",
        "name": "width"
      },
      {
        "type": "value",
        "name": "height",
        "default": "null"
      }
    ],
    "example": [
      {
        "type": "scss",
        "code": ".code {\n\t@include size(20px);\n\t// width: 20px;\n\t// height: 20px;\n}"
      }
    ],
    "access": "public",
    "require": [],
    "file": {
      "path": "mixins/_size.scss",
      "name": "_size.scss"
    }
  }
]
